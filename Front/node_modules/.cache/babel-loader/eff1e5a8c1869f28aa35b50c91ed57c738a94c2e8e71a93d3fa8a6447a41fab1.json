{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deividas\\\\CC_Workspace\\\\lawander\\\\Front\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../css/chat.css\";\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\nfunction Chat({\n  destination,\n  days,\n  onBackToWelcome\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default to London\n  const [markers, setMarkers] = useState([]);\n  const messagesEndRef = React.useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // Extract place names from text (format: **PlaceName**)\n  const extractPlaceNames = text => {\n    console.log(\"Extracting place names from text:\", text);\n    const regex = /\\*\\*(.*?)\\*\\*/g;\n    const matches = [];\n    let match;\n    while ((match = regex.exec(text)) !== null) {\n      matches.push(match[1].trim());\n    }\n    console.log(\"Found matches:\", matches);\n    return matches;\n  };\n\n  // Format message text to highlight only found place names\n  const formatMessageText = (text, foundPlaces = []) => {\n    if (foundPlaces.length === 0) {\n      // If no places were found, don't highlight any\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, '$1');\n    }\n\n    // Only highlight places that were actually found on the map\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, (match, placeName) => {\n      const trimmedPlaceName = placeName.trim();\n      if (foundPlaces.includes(trimmedPlaceName)) {\n        return `<span class=\"place-name\">${placeName}</span>`;\n      } else {\n        return placeName; // Don't highlight if not found\n      }\n    });\n  };\n\n  // Geocode multiple places and add them to the map\n  const geocodePlaces = async placeNames => {\n    console.log(\"Geocoding places:\", placeNames);\n    const newMarkers = [];\n    const foundPlaces = [];\n    for (const placeName of placeNames) {\n      try {\n        // Try multiple search strategies for better results\n        const searchQueries = [`${placeName}`,\n        // Original name\n        `${placeName}, ${destination}`,\n        // Name + destination city\n        `${placeName} museum`,\n        // Add \"museum\" if it's a museum\n        `${placeName} attraction` // Add \"attraction\"\n        ];\n\n        // For museums, try alternative search terms\n        if (placeName.toLowerCase().includes(\"museum\")) {\n          // Try without \"museum\" in the name\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\n          if (nameWithoutMuseum) {\n            searchQueries.push(`${nameWithoutMuseum}, ${destination}`);\n            searchQueries.push(`${nameWithoutMuseum} museum, ${destination}`);\n          }\n\n          // Try with just the main part of the name\n          const mainName = placeName.split(\":\")[0].split(\"(\")[0].trim();\n          if (mainName !== placeName) {\n            searchQueries.push(`${mainName}, ${destination}`);\n            searchQueries.push(`${mainName} museum, ${destination}`);\n          }\n        }\n        let found = false;\n        for (const query of searchQueries) {\n          const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=3&addressdetails=1`);\n          const data = await response.json();\n          console.log(`Searching for \"${query}\":`, data.length, \"results\");\n          if (data && data.length > 0) {\n            // Find the best match (prefer results with more address details)\n            const bestMatch = data.find(item => item.display_name.toLowerCase().includes(placeName.toLowerCase()) || item.display_name.toLowerCase().includes(destination.toLowerCase())) || data[0];\n            const {\n              lat,\n              lon,\n              display_name\n            } = bestMatch;\n            const coordinates = [parseFloat(lat), parseFloat(lon)];\n            newMarkers.push({\n              position: coordinates,\n              popup: `${placeName}<br><small>${display_name}</small>`\n            });\n            foundPlaces.push(placeName); // Add to found places list\n            console.log(`✅ Found ${placeName} at:`, coordinates);\n            console.log(`   Full address: ${display_name}`);\n            found = true;\n            break; // Stop trying other queries once we find a match\n          }\n        }\n        if (!found) {\n          console.log(`❌ No results found for: ${placeName}`);\n\n          // Fallback: Try to find any museum in the destination city\n          if (placeName.toLowerCase().includes(\"museum\")) {\n            console.log(`🔄 Trying fallback search for museums in ${destination}`);\n            try {\n              const fallbackResponse = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=museum+${encodeURIComponent(destination)}&limit=5&addressdetails=1`);\n              const fallbackData = await fallbackResponse.json();\n              if (fallbackData && fallbackData.length > 0) {\n                // Find a museum that hasn't been added yet\n                const availableMuseums = fallbackData.filter(museum => !newMarkers.some(marker => marker.popup.toLowerCase().includes(museum.display_name.toLowerCase().split(\",\")[0].toLowerCase())));\n                if (availableMuseums.length > 0) {\n                  const museum = availableMuseums[0];\n                  const coordinates = [parseFloat(museum.lat), parseFloat(museum.lon)];\n                  newMarkers.push({\n                    position: coordinates,\n                    popup: `${placeName} (${museum.display_name.split(\",\")[0]})<br><small>${museum.display_name}</small>`\n                  });\n                  foundPlaces.push(placeName); // Add fallback found place to list\n                  console.log(`✅ Fallback found: ${museum.display_name.split(\",\")[0]} at:`, coordinates);\n                }\n              }\n            } catch (fallbackError) {\n              console.error(`Fallback search failed for ${placeName}:`, fallbackError);\n            }\n          }\n        }\n\n        // Add small delay to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 200));\n      } catch (error) {\n        console.error(`Error geocoding ${placeName}:`, error);\n      }\n    }\n\n    // Add new markers to existing ones\n    if (newMarkers.length > 0) {\n      setMarkers(prev => [...prev, ...newMarkers]);\n      console.log(`Added ${newMarkers.length} new markers to map`);\n    } else {\n      console.log(\"No new markers were added\");\n    }\n    console.log(\"Found places for highlighting:\", foundPlaces);\n    return foundPlaces;\n  };\n\n  // Geocode destination to get coordinates\n  const geocodeDestination = React.useCallback(async destinationName => {\n    try {\n      console.log(\"Geocoding destination:\", destinationName);\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(destinationName)}&limit=1`);\n      const data = await response.json();\n      console.log(\"Geocoding response:\", data);\n      if (data && data.length > 0) {\n        const {\n          lat,\n          lon\n        } = data[0];\n        const coordinates = [parseFloat(lat), parseFloat(lon)];\n        console.log(\"Found coordinates:\", coordinates);\n\n        // Update map center to destination\n        setMapCenter(coordinates);\n\n        // Add destination marker\n        setMarkers([{\n          position: coordinates,\n          popup: `${destinationName} - Your destination for ${days} days`\n        }]);\n        return coordinates;\n      } else {\n        console.log(\"No results found for:\", destinationName);\n      }\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n    }\n    return null;\n  }, [days]);\n  useEffect(() => {\n    // Initialize with welcome message\n    const welcomeMessage = {\n      id: 1,\n      text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\n      sender: \"ai\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages([welcomeMessage]);\n\n    // Geocode destination and update map\n    if (destination) {\n      geocodeDestination(destination);\n    }\n  }, [destination, days, geocodeDestination]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n    const newMessage = {\n      id: messages.length + 1,\n      text: inputMessage,\n      sender: \"user\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages([...messages, newMessage]);\n    const userMessage = inputMessage;\n    setInputMessage(\"\");\n\n    // Add loading message\n    const loadingMessage = {\n      id: messages.length + 2,\n      text: \"Lawander is thinking...\",\n      sender: \"ai\",\n      timestamp: new Date().toLocaleTimeString(),\n      isLoading: true\n    };\n    setMessages(prev => [...prev, loadingMessage]);\n    try {\n      // Add destination context to the message\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. Please provide information specifically about ${destination} and its attractions, restaurants, activities, etc. User question: ${userMessage}`;\n\n      // Call backend API\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: contextualMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Extract place names from AI response (format: **PlaceName**)\n      const placeNames = extractPlaceNames(data.message);\n      console.log(\"AI Response:\", data.message);\n      console.log(\"Extracted place names:\", placeNames);\n\n      // Geocode the places and add them to the map\n      let foundPlaces = [];\n      if (placeNames.length > 0) {\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\n        foundPlaces = await geocodePlaces(placeNames);\n      } else {\n        console.log(\"No place names found in AI response\");\n      }\n\n      // Remove loading message and add real response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const aiResponse = {\n          id: withoutLoading.length + 1,\n          text: data.message,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          foundPlaces: foundPlaces // Store found places for highlighting\n        };\n        return [...withoutLoading, aiResponse];\n      });\n    } catch (error) {\n      console.error(\"Error calling chat API:\", error);\n\n      // Remove loading message and add error response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const errorResponse = {\n          id: withoutLoading.length + 1,\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        return [...withoutLoading, errorResponse];\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: onBackToWelcome,\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"chat-title\",\n          children: \"Lawander\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trip-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"destination\",\n          children: destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"days\",\n          children: [days, \" days\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender === \"user\" ? \"user-message\" : \"ai-message\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message-content ${message.isLoading ? \"loading\" : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                dangerouslySetInnerHTML: {\n                  __html: formatMessageText(message.text, message.foundPlaces)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-time\",\n                children: message.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"message-form\",\n          onSubmit: handleSendMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputMessage,\n            onChange: e => setInputMessage(e.target.value),\n            placeholder: \"Ask about your destination...\",\n            className: \"message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: mapCenter,\n          zoom: 13,\n          style: {\n            height: \"100%\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: marker.position,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: marker.popup\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this))]\n        }, `${mapCenter[0]}-${mapCenter[1]}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"Cy69dn7R+sTDLfWgizxoHCN8dp8=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Chat","destination","days","onBackToWelcome","_s","messages","setMessages","inputMessage","setInputMessage","mapCenter","setMapCenter","markers","setMarkers","messagesEndRef","useRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","extractPlaceNames","text","console","log","regex","matches","match","exec","push","trim","formatMessageText","foundPlaces","length","replace","placeName","trimmedPlaceName","includes","geocodePlaces","placeNames","newMarkers","searchQueries","toLowerCase","nameWithoutMuseum","mainName","split","found","query","response","fetch","encodeURIComponent","data","json","bestMatch","find","item","display_name","lat","lon","coordinates","parseFloat","position","popup","fallbackResponse","fallbackData","availableMuseums","filter","museum","some","marker","fallbackError","error","Promise","resolve","setTimeout","prev","geocodeDestination","useCallback","destinationName","welcomeMessage","id","sender","timestamp","Date","toLocaleTimeString","handleSendMessage","e","preventDefault","newMessage","userMessage","loadingMessage","isLoading","contextualMessage","method","headers","body","JSON","stringify","message","ok","Error","status","withoutLoading","msg","aiResponse","errorResponse","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","dangerouslySetInnerHTML","__html","ref","onSubmit","type","value","onChange","target","placeholder","center","zoom","style","height","width","attribution","url","index","_c","$RefreshReg$"],"sources":["C:/Users/Deividas/CC_Workspace/lawander/Front/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"../css/chat.css\";\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\r\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\r\n});\r\n\r\nfunction Chat({ destination, days, onBackToWelcome }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default to London\r\n  const [markers, setMarkers] = useState([]);\r\n  const messagesEndRef = React.useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  // Extract place names from text (format: **PlaceName**)\r\n  const extractPlaceNames = (text) => {\r\n    console.log(\"Extracting place names from text:\", text);\r\n    const regex = /\\*\\*(.*?)\\*\\*/g;\r\n    const matches = [];\r\n    let match;\r\n    while ((match = regex.exec(text)) !== null) {\r\n      matches.push(match[1].trim());\r\n    }\r\n    console.log(\"Found matches:\", matches);\r\n    return matches;\r\n  };\r\n\r\n  // Format message text to highlight only found place names\r\n  const formatMessageText = (text, foundPlaces = []) => {\r\n    if (foundPlaces.length === 0) {\r\n      // If no places were found, don't highlight any\r\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, '$1');\r\n    }\r\n    \r\n    // Only highlight places that were actually found on the map\r\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, (match, placeName) => {\r\n      const trimmedPlaceName = placeName.trim();\r\n      if (foundPlaces.includes(trimmedPlaceName)) {\r\n        return `<span class=\"place-name\">${placeName}</span>`;\r\n      } else {\r\n        return placeName; // Don't highlight if not found\r\n      }\r\n    });\r\n  };\r\n\r\n  // Geocode multiple places and add them to the map\r\n  const geocodePlaces = async (placeNames) => {\r\n    console.log(\"Geocoding places:\", placeNames);\r\n    const newMarkers = [];\r\n    const foundPlaces = [];\r\n\r\n    for (const placeName of placeNames) {\r\n      try {\r\n        // Try multiple search strategies for better results\r\n        const searchQueries = [\r\n          `${placeName}`, // Original name\r\n          `${placeName}, ${destination}`, // Name + destination city\r\n          `${placeName} museum`, // Add \"museum\" if it's a museum\r\n          `${placeName} attraction`, // Add \"attraction\"\r\n        ];\r\n\r\n        // For museums, try alternative search terms\r\n        if (placeName.toLowerCase().includes(\"museum\")) {\r\n          // Try without \"museum\" in the name\r\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\r\n          if (nameWithoutMuseum) {\r\n            searchQueries.push(`${nameWithoutMuseum}, ${destination}`);\r\n            searchQueries.push(`${nameWithoutMuseum} museum, ${destination}`);\r\n          }\r\n\r\n          // Try with just the main part of the name\r\n          const mainName = placeName.split(\":\")[0].split(\"(\")[0].trim();\r\n          if (mainName !== placeName) {\r\n            searchQueries.push(`${mainName}, ${destination}`);\r\n            searchQueries.push(`${mainName} museum, ${destination}`);\r\n          }\r\n        }\r\n\r\n        let found = false;\r\n        for (const query of searchQueries) {\r\n          const response = await fetch(\r\n            `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n              query\r\n            )}&limit=3&addressdetails=1`\r\n          );\r\n          const data = await response.json();\r\n\r\n          console.log(`Searching for \"${query}\":`, data.length, \"results\");\r\n\r\n          if (data && data.length > 0) {\r\n            // Find the best match (prefer results with more address details)\r\n            const bestMatch =\r\n              data.find(\r\n                (item) =>\r\n                  item.display_name\r\n                    .toLowerCase()\r\n                    .includes(placeName.toLowerCase()) ||\r\n                  item.display_name\r\n                    .toLowerCase()\r\n                    .includes(destination.toLowerCase())\r\n              ) || data[0];\r\n\r\n            const { lat, lon, display_name } = bestMatch;\r\n            const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n\r\n            newMarkers.push({\r\n              position: coordinates,\r\n              popup: `${placeName}<br><small>${display_name}</small>`,\r\n            });\r\n\r\n            foundPlaces.push(placeName); // Add to found places list\r\n            console.log(`✅ Found ${placeName} at:`, coordinates);\r\n            console.log(`   Full address: ${display_name}`);\r\n            found = true;\r\n            break; // Stop trying other queries once we find a match\r\n          }\r\n        }\r\n\r\n        if (!found) {\r\n          console.log(`❌ No results found for: ${placeName}`);\r\n\r\n          // Fallback: Try to find any museum in the destination city\r\n          if (placeName.toLowerCase().includes(\"museum\")) {\r\n            console.log(\r\n              `🔄 Trying fallback search for museums in ${destination}`\r\n            );\r\n            try {\r\n              const fallbackResponse = await fetch(\r\n                `https://nominatim.openstreetmap.org/search?format=json&q=museum+${encodeURIComponent(\r\n                  destination\r\n                )}&limit=5&addressdetails=1`\r\n              );\r\n              const fallbackData = await fallbackResponse.json();\r\n\r\n              if (fallbackData && fallbackData.length > 0) {\r\n                // Find a museum that hasn't been added yet\r\n                const availableMuseums = fallbackData.filter(\r\n                  (museum) =>\r\n                    !newMarkers.some((marker) =>\r\n                      marker.popup\r\n                        .toLowerCase()\r\n                        .includes(\r\n                          museum.display_name\r\n                            .toLowerCase()\r\n                            .split(\",\")[0]\r\n                            .toLowerCase()\r\n                        )\r\n                    )\r\n                );\r\n\r\n                if (availableMuseums.length > 0) {\r\n                  const museum = availableMuseums[0];\r\n                  const coordinates = [\r\n                    parseFloat(museum.lat),\r\n                    parseFloat(museum.lon),\r\n                  ];\r\n\r\n                  newMarkers.push({\r\n                    position: coordinates,\r\n                    popup: `${placeName} (${\r\n                      museum.display_name.split(\",\")[0]\r\n                    })<br><small>${museum.display_name}</small>`,\r\n                  });\r\n\r\n                  foundPlaces.push(placeName); // Add fallback found place to list\r\n                  console.log(\r\n                    `✅ Fallback found: ${\r\n                      museum.display_name.split(\",\")[0]\r\n                    } at:`,\r\n                    coordinates\r\n                  );\r\n                }\r\n              }\r\n            } catch (fallbackError) {\r\n              console.error(\r\n                `Fallback search failed for ${placeName}:`,\r\n                fallbackError\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        // Add small delay to avoid rate limiting\r\n        await new Promise((resolve) => setTimeout(resolve, 200));\r\n      } catch (error) {\r\n        console.error(`Error geocoding ${placeName}:`, error);\r\n      }\r\n    }\r\n\r\n    // Add new markers to existing ones\r\n    if (newMarkers.length > 0) {\r\n      setMarkers((prev) => [...prev, ...newMarkers]);\r\n      console.log(`Added ${newMarkers.length} new markers to map`);\r\n    } else {\r\n      console.log(\"No new markers were added\");\r\n    }\r\n\r\n    console.log(\"Found places for highlighting:\", foundPlaces);\r\n    return foundPlaces;\r\n  };\r\n\r\n  // Geocode destination to get coordinates\r\n  const geocodeDestination = React.useCallback(\r\n    async (destinationName) => {\r\n      try {\r\n        console.log(\"Geocoding destination:\", destinationName);\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n            destinationName\r\n          )}&limit=1`\r\n        );\r\n        const data = await response.json();\r\n        console.log(\"Geocoding response:\", data);\r\n\r\n        if (data && data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n          console.log(\"Found coordinates:\", coordinates);\r\n\r\n          // Update map center to destination\r\n          setMapCenter(coordinates);\r\n\r\n          // Add destination marker\r\n          setMarkers([\r\n            {\r\n              position: coordinates,\r\n              popup: `${destinationName} - Your destination for ${days} days`,\r\n            },\r\n          ]);\r\n\r\n          return coordinates;\r\n        } else {\r\n          console.log(\"No results found for:\", destinationName);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Geocoding error:\", error);\r\n      }\r\n      return null;\r\n    },\r\n    [days]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Initialize with welcome message\r\n    const welcomeMessage = {\r\n      id: 1,\r\n      text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\r\n      sender: \"ai\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n    setMessages([welcomeMessage]);\r\n\r\n    // Geocode destination and update map\r\n    if (destination) {\r\n      geocodeDestination(destination);\r\n    }\r\n  }, [destination, days, geocodeDestination]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const newMessage = {\r\n      id: messages.length + 1,\r\n      text: inputMessage,\r\n      sender: \"user\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n\r\n    setMessages([...messages, newMessage]);\r\n    const userMessage = inputMessage;\r\n    setInputMessage(\"\");\r\n\r\n    // Add loading message\r\n    const loadingMessage = {\r\n      id: messages.length + 2,\r\n      text: \"Lawander is thinking...\",\r\n      sender: \"ai\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      isLoading: true,\r\n    };\r\n    setMessages((prev) => [...prev, loadingMessage]);\r\n\r\n    try {\r\n      // Add destination context to the message\r\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. Please provide information specifically about ${destination} and its attractions, restaurants, activities, etc. User question: ${userMessage}`;\r\n\r\n      // Call backend API\r\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: contextualMessage,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // Extract place names from AI response (format: **PlaceName**)\r\n      const placeNames = extractPlaceNames(data.message);\r\n      console.log(\"AI Response:\", data.message);\r\n      console.log(\"Extracted place names:\", placeNames);\r\n\r\n      // Geocode the places and add them to the map\r\n      let foundPlaces = [];\r\n      if (placeNames.length > 0) {\r\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\r\n        foundPlaces = await geocodePlaces(placeNames);\r\n      } else {\r\n        console.log(\"No place names found in AI response\");\r\n      }\r\n\r\n      // Remove loading message and add real response\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const aiResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: data.message,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          foundPlaces: foundPlaces, // Store found places for highlighting\r\n        };\r\n        return [...withoutLoading, aiResponse];\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error calling chat API:\", error);\r\n\r\n      // Remove loading message and add error response\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const errorResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n        };\r\n        return [...withoutLoading, errorResponse];\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-app\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"header-left\">\r\n          <button className=\"back-button\" onClick={onBackToWelcome}>\r\n            ← Back\r\n          </button>\r\n          <h1 className=\"chat-title\">Lawander</h1>\r\n        </div>\r\n        <div className=\"trip-info\">\r\n          <span className=\"destination\">{destination}</span>\r\n          <span className=\"days\">{days} days</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-window\">\r\n          <div className=\"messages-container\">\r\n            {messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`message ${\r\n                  message.sender === \"user\" ? \"user-message\" : \"ai-message\"\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`message-content ${\r\n                    message.isLoading ? \"loading\" : \"\"\r\n                  }`}\r\n                >\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: formatMessageText(message.text, message.foundPlaces),\r\n                    }}\r\n                  ></p>\r\n                  <span className=\"message-time\">{message.timestamp}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          <form className=\"message-form\" onSubmit={handleSendMessage}>\r\n            <input\r\n              type=\"text\"\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              placeholder=\"Ask about your destination...\"\r\n              className=\"message-input\"\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n              Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"map-container\">\r\n          <MapContainer\r\n            key={`${mapCenter[0]}-${mapCenter[1]}`}\r\n            center={mapCenter}\r\n            zoom={13}\r\n            style={{ height: \"100%\", width: \"100%\" }}\r\n          >\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {markers.map((marker, index) => (\r\n              <Marker key={index} position={marker.position}>\r\n                <Popup>{marker.popup}</Popup>\r\n              </Marker>\r\n            ))}\r\n          </MapContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}