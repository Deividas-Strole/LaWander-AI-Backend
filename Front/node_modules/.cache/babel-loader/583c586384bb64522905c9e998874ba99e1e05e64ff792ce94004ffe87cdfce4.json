{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deividas\\\\CC_Workspace\\\\lawander\\\\Front\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../css/chat.css\";\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\nfunction Chat({\n  destination,\n  days,\n  onBackToWelcome\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default to London\n  const [markers, setMarkers] = useState([]);\n  const messagesEndRef = React.useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // Extract place names from text (format: **PlaceName**)\n  const extractPlaceNames = text => {\n    console.log(\"Extracting place names from text:\", text);\n    const regex = /\\*\\*(.*?)\\*\\*/g;\n    const matches = [];\n    let match;\n    while ((match = regex.exec(text)) !== null) {\n      matches.push(match[1].trim());\n    }\n    console.log(\"Found matches:\", matches);\n    return matches;\n  };\n\n  // Format message text to highlight place names\n  const formatMessageText = text => {\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<span class=\"place-name\">$1</span>');\n  };\n\n  // Geocode multiple places and add them to the map\n  const geocodePlaces = async placeNames => {\n    console.log(\"Geocoding places:\", placeNames);\n    const newMarkers = [];\n    for (const placeName of placeNames) {\n      try {\n        // Try multiple search strategies for better results\n        const searchQueries = [`${placeName}`,\n        // Original name\n        `${placeName}, ${destination}`,\n        // Name + destination city\n        `${placeName} museum`,\n        // Add \"museum\" if it's a museum\n        `${placeName} attraction` // Add \"attraction\"\n        ];\n\n        // For museums, try alternative search terms\n        if (placeName.toLowerCase().includes(\"museum\")) {\n          // Try without \"museum\" in the name\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\n          if (nameWithoutMuseum) {\n            searchQueries.push(`${nameWithoutMuseum}, ${destination}`);\n            searchQueries.push(`${nameWithoutMuseum} museum, ${destination}`);\n          }\n\n          // Try with just the main part of the name\n          const mainName = placeName.split(\":\")[0].split(\"(\")[0].trim();\n          if (mainName !== placeName) {\n            searchQueries.push(`${mainName}, ${destination}`);\n            searchQueries.push(`${mainName} museum, ${destination}`);\n          }\n        }\n        let found = false;\n        for (const query of searchQueries) {\n          const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=3&addressdetails=1`);\n          const data = await response.json();\n          console.log(`Searching for \"${query}\":`, data.length, \"results\");\n          if (data && data.length > 0) {\n            // Find the best match (prefer results with more address details)\n            const bestMatch = data.find(item => item.display_name.toLowerCase().includes(placeName.toLowerCase()) || item.display_name.toLowerCase().includes(destination.toLowerCase())) || data[0];\n            const {\n              lat,\n              lon,\n              display_name\n            } = bestMatch;\n            const coordinates = [parseFloat(lat), parseFloat(lon)];\n            newMarkers.push({\n              position: coordinates,\n              popup: `${placeName}<br><small>${display_name}</small>`\n            });\n            console.log(`✅ Found ${placeName} at:`, coordinates);\n            console.log(`   Full address: ${display_name}`);\n            found = true;\n            break; // Stop trying other queries once we find a match\n          }\n        }\n        if (!found) {\n          console.log(`❌ No results found for: ${placeName}`);\n\n          // Fallback: Try to find any museum in the destination city\n          if (placeName.toLowerCase().includes(\"museum\")) {\n            console.log(`🔄 Trying fallback search for museums in ${destination}`);\n            try {\n              const fallbackResponse = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=museum+${encodeURIComponent(destination)}&limit=5&addressdetails=1`);\n              const fallbackData = await fallbackResponse.json();\n              if (fallbackData && fallbackData.length > 0) {\n                // Find a museum that hasn't been added yet\n                const availableMuseums = fallbackData.filter(museum => !newMarkers.some(marker => marker.popup.toLowerCase().includes(museum.display_name.toLowerCase().split(\",\")[0].toLowerCase())));\n                if (availableMuseums.length > 0) {\n                  const museum = availableMuseums[0];\n                  const coordinates = [parseFloat(museum.lat), parseFloat(museum.lon)];\n                  newMarkers.push({\n                    position: coordinates,\n                    popup: `${placeName} (${museum.display_name.split(\",\")[0]})<br><small>${museum.display_name}</small>`\n                  });\n                  console.log(`✅ Fallback found: ${museum.display_name.split(\",\")[0]} at:`, coordinates);\n                }\n              }\n            } catch (fallbackError) {\n              console.error(`Fallback search failed for ${placeName}:`, fallbackError);\n            }\n          }\n        }\n\n        // Add small delay to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 200));\n      } catch (error) {\n        console.error(`Error geocoding ${placeName}:`, error);\n      }\n    }\n\n    // Add new markers to existing ones\n    if (newMarkers.length > 0) {\n      setMarkers(prev => [...prev, ...newMarkers]);\n      console.log(`Added ${newMarkers.length} new markers to map`);\n    } else {\n      console.log(\"No new markers were added\");\n    }\n  };\n\n  // Geocode destination to get coordinates\n  const geocodeDestination = React.useCallback(async destinationName => {\n    try {\n      console.log(\"Geocoding destination:\", destinationName);\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(destinationName)}&limit=1`);\n      const data = await response.json();\n      console.log(\"Geocoding response:\", data);\n      if (data && data.length > 0) {\n        const {\n          lat,\n          lon\n        } = data[0];\n        const coordinates = [parseFloat(lat), parseFloat(lon)];\n        console.log(\"Found coordinates:\", coordinates);\n\n        // Update map center to destination\n        setMapCenter(coordinates);\n\n        // Add destination marker\n        setMarkers([{\n          position: coordinates,\n          popup: `${destinationName} - Your destination for ${days} days`\n        }]);\n        return coordinates;\n      } else {\n        console.log(\"No results found for:\", destinationName);\n      }\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n    }\n    return null;\n  }, [days]);\n  useEffect(() => {\n    // Initialize with welcome message\n    const welcomeMessage = {\n      id: 1,\n      text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\n      sender: \"ai\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages([welcomeMessage]);\n\n    // Geocode destination and update map\n    if (destination) {\n      geocodeDestination(destination);\n    }\n  }, [destination, days, geocodeDestination]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n    const newMessage = {\n      id: messages.length + 1,\n      text: inputMessage,\n      sender: \"user\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages([...messages, newMessage]);\n    const userMessage = inputMessage;\n    setInputMessage(\"\");\n\n    // Add loading message\n    const loadingMessage = {\n      id: messages.length + 2,\n      text: \"Lawander is thinking...\",\n      sender: \"ai\",\n      timestamp: new Date().toLocaleTimeString(),\n      isLoading: true\n    };\n    setMessages(prev => [...prev, loadingMessage]);\n    try {\n      // Add destination context to the message\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. Please provide information specifically about ${destination} and its attractions, restaurants, activities, etc. User question: ${userMessage}`;\n\n      // Call backend API\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: contextualMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Extract place names from AI response (format: **PlaceName**)\n      const placeNames = extractPlaceNames(data.message);\n      console.log(\"AI Response:\", data.message);\n      console.log(\"Extracted place names:\", placeNames);\n\n      // Geocode the places and add them to the map\n      let foundPlaces = [];\n      if (placeNames.length > 0) {\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\n        foundPlaces = await geocodePlaces(placeNames);\n      } else {\n        console.log(\"No place names found in AI response\");\n      }\n\n      // Remove loading message and add real response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const aiResponse = {\n          id: withoutLoading.length + 1,\n          text: data.message,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          foundPlaces: foundPlaces // Store found places for highlighting\n        };\n        return [...withoutLoading, aiResponse];\n      });\n    } catch (error) {\n      console.error(\"Error calling chat API:\", error);\n\n      // Remove loading message and add error response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const errorResponse = {\n          id: withoutLoading.length + 1,\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        return [...withoutLoading, errorResponse];\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: onBackToWelcome,\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"chat-title\",\n          children: \"Lawander\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trip-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"destination\",\n          children: destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"days\",\n          children: [days, \" days\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender === \"user\" ? \"user-message\" : \"ai-message\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message-content ${message.isLoading ? \"loading\" : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                dangerouslySetInnerHTML: {\n                  __html: formatMessageText(message.text)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-time\",\n                children: message.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 17\n            }, this)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"message-form\",\n          onSubmit: handleSendMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputMessage,\n            onChange: e => setInputMessage(e.target.value),\n            placeholder: \"Ask about your destination...\",\n            className: \"message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: mapCenter,\n          zoom: 13,\n          style: {\n            height: \"100%\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: marker.position,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: marker.popup\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this))]\n        }, `${mapCenter[0]}-${mapCenter[1]}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"Cy69dn7R+sTDLfWgizxoHCN8dp8=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Chat","destination","days","onBackToWelcome","_s","messages","setMessages","inputMessage","setInputMessage","mapCenter","setMapCenter","markers","setMarkers","messagesEndRef","useRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","extractPlaceNames","text","console","log","regex","matches","match","exec","push","trim","formatMessageText","replace","geocodePlaces","placeNames","newMarkers","placeName","searchQueries","toLowerCase","includes","nameWithoutMuseum","mainName","split","found","query","response","fetch","encodeURIComponent","data","json","length","bestMatch","find","item","display_name","lat","lon","coordinates","parseFloat","position","popup","fallbackResponse","fallbackData","availableMuseums","filter","museum","some","marker","fallbackError","error","Promise","resolve","setTimeout","prev","geocodeDestination","useCallback","destinationName","welcomeMessage","id","sender","timestamp","Date","toLocaleTimeString","handleSendMessage","e","preventDefault","newMessage","userMessage","loadingMessage","isLoading","contextualMessage","method","headers","body","JSON","stringify","message","ok","Error","status","foundPlaces","withoutLoading","msg","aiResponse","errorResponse","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","dangerouslySetInnerHTML","__html","ref","onSubmit","type","value","onChange","target","placeholder","center","zoom","style","height","width","attribution","url","index","_c","$RefreshReg$"],"sources":["C:/Users/Deividas/CC_Workspace/lawander/Front/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"../css/chat.css\";\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\r\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\r\n});\r\n\r\nfunction Chat({ destination, days, onBackToWelcome }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default to London\r\n  const [markers, setMarkers] = useState([]);\r\n  const messagesEndRef = React.useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  // Extract place names from text (format: **PlaceName**)\r\n  const extractPlaceNames = (text) => {\r\n    console.log(\"Extracting place names from text:\", text);\r\n    const regex = /\\*\\*(.*?)\\*\\*/g;\r\n    const matches = [];\r\n    let match;\r\n    while ((match = regex.exec(text)) !== null) {\r\n      matches.push(match[1].trim());\r\n    }\r\n    console.log(\"Found matches:\", matches);\r\n    return matches;\r\n  };\r\n\r\n  // Format message text to highlight place names\r\n  const formatMessageText = (text) => {\r\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<span class=\"place-name\">$1</span>');\r\n  };\r\n\r\n  // Geocode multiple places and add them to the map\r\n  const geocodePlaces = async (placeNames) => {\r\n    console.log(\"Geocoding places:\", placeNames);\r\n    const newMarkers = [];\r\n\r\n    for (const placeName of placeNames) {\r\n      try {\r\n        // Try multiple search strategies for better results\r\n        const searchQueries = [\r\n          `${placeName}`, // Original name\r\n          `${placeName}, ${destination}`, // Name + destination city\r\n          `${placeName} museum`, // Add \"museum\" if it's a museum\r\n          `${placeName} attraction`, // Add \"attraction\"\r\n        ];\r\n\r\n        // For museums, try alternative search terms\r\n        if (placeName.toLowerCase().includes(\"museum\")) {\r\n          // Try without \"museum\" in the name\r\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\r\n          if (nameWithoutMuseum) {\r\n            searchQueries.push(`${nameWithoutMuseum}, ${destination}`);\r\n            searchQueries.push(`${nameWithoutMuseum} museum, ${destination}`);\r\n          }\r\n\r\n          // Try with just the main part of the name\r\n          const mainName = placeName.split(\":\")[0].split(\"(\")[0].trim();\r\n          if (mainName !== placeName) {\r\n            searchQueries.push(`${mainName}, ${destination}`);\r\n            searchQueries.push(`${mainName} museum, ${destination}`);\r\n          }\r\n        }\r\n\r\n        let found = false;\r\n        for (const query of searchQueries) {\r\n          const response = await fetch(\r\n            `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n              query\r\n            )}&limit=3&addressdetails=1`\r\n          );\r\n          const data = await response.json();\r\n\r\n          console.log(`Searching for \"${query}\":`, data.length, \"results\");\r\n\r\n          if (data && data.length > 0) {\r\n            // Find the best match (prefer results with more address details)\r\n            const bestMatch =\r\n              data.find(\r\n                (item) =>\r\n                  item.display_name\r\n                    .toLowerCase()\r\n                    .includes(placeName.toLowerCase()) ||\r\n                  item.display_name\r\n                    .toLowerCase()\r\n                    .includes(destination.toLowerCase())\r\n              ) || data[0];\r\n\r\n            const { lat, lon, display_name } = bestMatch;\r\n            const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n\r\n            newMarkers.push({\r\n              position: coordinates,\r\n              popup: `${placeName}<br><small>${display_name}</small>`,\r\n            });\r\n\r\n            console.log(`✅ Found ${placeName} at:`, coordinates);\r\n            console.log(`   Full address: ${display_name}`);\r\n            found = true;\r\n            break; // Stop trying other queries once we find a match\r\n          }\r\n        }\r\n\r\n        if (!found) {\r\n          console.log(`❌ No results found for: ${placeName}`);\r\n\r\n          // Fallback: Try to find any museum in the destination city\r\n          if (placeName.toLowerCase().includes(\"museum\")) {\r\n            console.log(\r\n              `🔄 Trying fallback search for museums in ${destination}`\r\n            );\r\n            try {\r\n              const fallbackResponse = await fetch(\r\n                `https://nominatim.openstreetmap.org/search?format=json&q=museum+${encodeURIComponent(\r\n                  destination\r\n                )}&limit=5&addressdetails=1`\r\n              );\r\n              const fallbackData = await fallbackResponse.json();\r\n\r\n              if (fallbackData && fallbackData.length > 0) {\r\n                // Find a museum that hasn't been added yet\r\n                const availableMuseums = fallbackData.filter(\r\n                  (museum) =>\r\n                    !newMarkers.some((marker) =>\r\n                      marker.popup\r\n                        .toLowerCase()\r\n                        .includes(\r\n                          museum.display_name\r\n                            .toLowerCase()\r\n                            .split(\",\")[0]\r\n                            .toLowerCase()\r\n                        )\r\n                    )\r\n                );\r\n\r\n                if (availableMuseums.length > 0) {\r\n                  const museum = availableMuseums[0];\r\n                  const coordinates = [\r\n                    parseFloat(museum.lat),\r\n                    parseFloat(museum.lon),\r\n                  ];\r\n\r\n                  newMarkers.push({\r\n                    position: coordinates,\r\n                    popup: `${placeName} (${\r\n                      museum.display_name.split(\",\")[0]\r\n                    })<br><small>${museum.display_name}</small>`,\r\n                  });\r\n\r\n                  console.log(\r\n                    `✅ Fallback found: ${\r\n                      museum.display_name.split(\",\")[0]\r\n                    } at:`,\r\n                    coordinates\r\n                  );\r\n                }\r\n              }\r\n            } catch (fallbackError) {\r\n              console.error(\r\n                `Fallback search failed for ${placeName}:`,\r\n                fallbackError\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        // Add small delay to avoid rate limiting\r\n        await new Promise((resolve) => setTimeout(resolve, 200));\r\n      } catch (error) {\r\n        console.error(`Error geocoding ${placeName}:`, error);\r\n      }\r\n    }\r\n\r\n    // Add new markers to existing ones\r\n    if (newMarkers.length > 0) {\r\n      setMarkers((prev) => [...prev, ...newMarkers]);\r\n      console.log(`Added ${newMarkers.length} new markers to map`);\r\n    } else {\r\n      console.log(\"No new markers were added\");\r\n    }\r\n  };\r\n\r\n  // Geocode destination to get coordinates\r\n  const geocodeDestination = React.useCallback(\r\n    async (destinationName) => {\r\n      try {\r\n        console.log(\"Geocoding destination:\", destinationName);\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n            destinationName\r\n          )}&limit=1`\r\n        );\r\n        const data = await response.json();\r\n        console.log(\"Geocoding response:\", data);\r\n\r\n        if (data && data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n          console.log(\"Found coordinates:\", coordinates);\r\n\r\n          // Update map center to destination\r\n          setMapCenter(coordinates);\r\n\r\n          // Add destination marker\r\n          setMarkers([\r\n            {\r\n              position: coordinates,\r\n              popup: `${destinationName} - Your destination for ${days} days`,\r\n            },\r\n          ]);\r\n\r\n          return coordinates;\r\n        } else {\r\n          console.log(\"No results found for:\", destinationName);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Geocoding error:\", error);\r\n      }\r\n      return null;\r\n    },\r\n    [days]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Initialize with welcome message\r\n    const welcomeMessage = {\r\n      id: 1,\r\n      text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\r\n      sender: \"ai\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n    setMessages([welcomeMessage]);\r\n\r\n    // Geocode destination and update map\r\n    if (destination) {\r\n      geocodeDestination(destination);\r\n    }\r\n  }, [destination, days, geocodeDestination]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const newMessage = {\r\n      id: messages.length + 1,\r\n      text: inputMessage,\r\n      sender: \"user\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n\r\n    setMessages([...messages, newMessage]);\r\n    const userMessage = inputMessage;\r\n    setInputMessage(\"\");\r\n\r\n    // Add loading message\r\n    const loadingMessage = {\r\n      id: messages.length + 2,\r\n      text: \"Lawander is thinking...\",\r\n      sender: \"ai\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      isLoading: true,\r\n    };\r\n    setMessages((prev) => [...prev, loadingMessage]);\r\n\r\n    try {\r\n      // Add destination context to the message\r\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. Please provide information specifically about ${destination} and its attractions, restaurants, activities, etc. User question: ${userMessage}`;\r\n\r\n      // Call backend API\r\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: contextualMessage,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // Extract place names from AI response (format: **PlaceName**)\r\n      const placeNames = extractPlaceNames(data.message);\r\n      console.log(\"AI Response:\", data.message);\r\n      console.log(\"Extracted place names:\", placeNames);\r\n\r\n      // Geocode the places and add them to the map\r\n      let foundPlaces = [];\r\n      if (placeNames.length > 0) {\r\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\r\n        foundPlaces = await geocodePlaces(placeNames);\r\n      } else {\r\n        console.log(\"No place names found in AI response\");\r\n      }\r\n\r\n      // Remove loading message and add real response\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const aiResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: data.message,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          foundPlaces: foundPlaces, // Store found places for highlighting\r\n        };\r\n        return [...withoutLoading, aiResponse];\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error calling chat API:\", error);\r\n\r\n      // Remove loading message and add error response\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const errorResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n        };\r\n        return [...withoutLoading, errorResponse];\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-app\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"header-left\">\r\n          <button className=\"back-button\" onClick={onBackToWelcome}>\r\n            ← Back\r\n          </button>\r\n          <h1 className=\"chat-title\">Lawander</h1>\r\n        </div>\r\n        <div className=\"trip-info\">\r\n          <span className=\"destination\">{destination}</span>\r\n          <span className=\"days\">{days} days</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-window\">\r\n          <div className=\"messages-container\">\r\n            {messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`message ${\r\n                  message.sender === \"user\" ? \"user-message\" : \"ai-message\"\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`message-content ${\r\n                    message.isLoading ? \"loading\" : \"\"\r\n                  }`}\r\n                >\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: formatMessageText(message.text),\r\n                    }}\r\n                  ></p>\r\n                  <span className=\"message-time\">{message.timestamp}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          <form className=\"message-form\" onSubmit={handleSendMessage}>\r\n            <input\r\n              type=\"text\"\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              placeholder=\"Ask about your destination...\"\r\n              className=\"message-input\"\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n              Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"map-container\">\r\n          <MapContainer\r\n            key={`${mapCenter[0]}-${mapCenter[1]}`}\r\n            center={mapCenter}\r\n            zoom={13}\r\n            style={{ height: \"100%\", width: \"100%\" }}\r\n          >\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {markers.map((marker, index) => (\r\n              <Marker key={index} position={marker.position}>\r\n                <Popup>{marker.popup}</Popup>\r\n              </Marker>\r\n            ))}\r\n          </MapContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}