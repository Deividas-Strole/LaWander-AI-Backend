{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deividas\\\\CC_Workspace\\\\lawander\\\\Front\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../css/chat.css\";\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\n\n// Create custom colored icons for different marker types\nconst createCustomIcon = (color, emoji = \"📍\") => {\n  return L.divIcon({\n    className: \"custom-marker\",\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 25px;\n        height: 25px;\n        border-radius: 50% 50% 50% 0;\n        transform: rotate(-45deg);\n        border: 2px solid white;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      \">\n        <div style=\"\n          transform: rotate(45deg);\n          color: white;\n          font-size: 12px;\n          font-weight: bold;\n        \">${emoji}</div>\n      </div>\n    `,\n    iconSize: [25, 25],\n    iconAnchor: [12, 24],\n    popupAnchor: [0, -24]\n  });\n};\n\n// Color scheme for different place types\nconst getMarkerColor = (placeType, placeName) => {\n  const name = placeName.toLowerCase();\n  if (placeType === \"destination\") {\n    return {\n      color: \"#ff69b4\",\n      emoji: \"🏙️\"\n    }; // Pink for destination\n  }\n\n  // Check for specific place categories\n  if (name.includes(\"museum\") || name.includes(\"gallery\") || name.includes(\"exhibition\")) {\n    return {\n      color: \"#8B4513\",\n      emoji: \"🏛️\"\n    }; // Brown for museums\n  }\n  if (name.includes(\"restaurant\") || name.includes(\"cafe\") || name.includes(\"bar\") || name.includes(\"food\") || name.includes(\"dining\") || name.includes(\"kitchen\")) {\n    return {\n      color: \"#DC143C\",\n      emoji: \"🍽️\"\n    }; // Red for restaurants\n  }\n  if (name.includes(\"hotel\") || name.includes(\"accommodation\") || name.includes(\"hostel\") || name.includes(\"resort\") || name.includes(\"lodge\")) {\n    return {\n      color: \"#4169E1\",\n      emoji: \"🏨\"\n    }; // Royal blue for hotels\n  }\n  if (name.includes(\"park\") || name.includes(\"garden\") || name.includes(\"nature\") || name.includes(\"forest\") || name.includes(\"beach\")) {\n    return {\n      color: \"#228B22\",\n      emoji: \"🌳\"\n    }; // Forest green for parks/nature\n  }\n  if (name.includes(\"church\") || name.includes(\"cathedral\") || name.includes(\"temple\") || name.includes(\"mosque\") || name.includes(\"synagogue\")) {\n    return {\n      color: \"#9370DB\",\n      emoji: \"⛪\"\n    }; // Purple for religious sites\n  }\n  if (name.includes(\"shop\") || name.includes(\"market\") || name.includes(\"mall\") || name.includes(\"store\") || name.includes(\"boutique\")) {\n    return {\n      color: \"#FF8C00\",\n      emoji: \"🛍️\"\n    }; // Orange for shopping\n  }\n  if (name.includes(\"theater\") || name.includes(\"cinema\") || name.includes(\"concert\") || name.includes(\"show\") || name.includes(\"entertainment\")) {\n    return {\n      color: \"#FF1493\",\n      emoji: \"🎭\"\n    }; // Deep pink for entertainment\n  }\n\n  // Default color for other attractions\n  return {\n    color: \"#1E90FF\",\n    emoji: \"🎯\"\n  }; // Dodger blue for general attractions\n};\n\n// Generate Wikipedia search URL for a place\nconst getWikipediaUrl = (placeName, destination) => {\n  const searchTerm = `${placeName} ${destination}`.replace(/\\s+/g, '_');\n  return `https://en.wikipedia.org/wiki/Special:Search?search=${encodeURIComponent(searchTerm)}`;\n};\n\n// Generate shortened description and category for a place\nconst getPlaceDescription = (placeName, fullAddress) => {\n  var _addressParts, _addressParts2;\n  const name = placeName.toLowerCase();\n\n  // Extract just the city/area from the full address\n  const addressParts = fullAddress.split(',');\n  const city = ((_addressParts = addressParts[addressParts.length - 3]) === null || _addressParts === void 0 ? void 0 : _addressParts.trim()) || ((_addressParts2 = addressParts[addressParts.length - 2]) === null || _addressParts2 === void 0 ? void 0 : _addressParts2.trim()) || 'Unknown';\n\n  // Generate category and description based on place type\n  if (name.includes(\"museum\") || name.includes(\"gallery\") || name.includes(\"exhibition\")) {\n    return {\n      category: \"Museum & Culture\",\n      description: `A cultural institution showcasing art, history, or science exhibits. Located in ${city}.`\n    };\n  }\n  if (name.includes(\"restaurant\") || name.includes(\"cafe\") || name.includes(\"bar\") || name.includes(\"food\") || name.includes(\"dining\") || name.includes(\"kitchen\")) {\n    return {\n      category: \"Dining & Food\",\n      description: `A local dining establishment offering food and beverages. Located in ${city}.`\n    };\n  }\n  if (name.includes(\"hotel\") || name.includes(\"accommodation\") || name.includes(\"hostel\") || name.includes(\"resort\") || name.includes(\"lodge\")) {\n    return {\n      category: \"Accommodation\",\n      description: `A place to stay during your visit. Located in ${city}.`\n    };\n  }\n  if (name.includes(\"park\") || name.includes(\"garden\") || name.includes(\"nature\") || name.includes(\"forest\") || name.includes(\"beach\")) {\n    return {\n      category: \"Nature & Recreation\",\n      description: `A natural area perfect for relaxation and outdoor activities. Located in ${city}.`\n    };\n  }\n  if (name.includes(\"church\") || name.includes(\"cathedral\") || name.includes(\"temple\") || name.includes(\"mosque\") || name.includes(\"synagogue\")) {\n    return {\n      category: \"Religious Site\",\n      description: `A place of worship with historical and cultural significance. Located in ${city}.`\n    };\n  }\n  if (name.includes(\"shop\") || name.includes(\"market\") || name.includes(\"mall\") || name.includes(\"store\") || name.includes(\"boutique\")) {\n    return {\n      category: \"Shopping\",\n      description: `A retail location for shopping and browsing local goods. Located in ${city}.`\n    };\n  }\n  if (name.includes(\"theater\") || name.includes(\"cinema\") || name.includes(\"concert\") || name.includes(\"show\") || name.includes(\"entertainment\")) {\n    return {\n      category: \"Entertainment\",\n      description: `A venue for shows, performances, and entertainment. Located in ${city}.`\n    };\n  }\n\n  // Default for other attractions\n  return {\n    category: \"Tourist Attraction\",\n    description: `A notable place worth visiting during your trip. Located in ${city}.`\n  };\n};\nfunction Chat({\n  destination,\n  days,\n  onBackToWelcome\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default to London\n  const [markers, setMarkers] = useState([]);\n  const messagesEndRef = React.useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // Extract place names from text (format: **PlaceName**)\n  const extractPlaceNames = text => {\n    console.log(\"Extracting place names from text:\", text);\n    const regex = /\\*\\*(.*?)\\*\\*/g;\n    const matches = [];\n    let match;\n    while ((match = regex.exec(text)) !== null) {\n      matches.push(match[1].trim());\n    }\n    console.log(\"Found matches:\", matches);\n    return matches;\n  };\n\n  // Format message text to highlight only found place names\n  const formatMessageText = (text, foundPlaces = []) => {\n    if (foundPlaces.length === 0) {\n      // If no places were found, don't highlight any\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\");\n    }\n\n    // Only highlight places that were actually found on the map\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, (match, placeName) => {\n      const trimmedPlaceName = placeName.trim();\n      if (foundPlaces.includes(trimmedPlaceName)) {\n        return `<span class=\"place-name\">${placeName}</span>`;\n      } else {\n        return placeName; // Don't highlight if not found\n      }\n    });\n  };\n\n  // Geocode multiple places and add them to the map\n  const geocodePlaces = async placeNames => {\n    console.log(\"Geocoding places:\", placeNames);\n    const newMarkers = [];\n    const foundPlaces = [];\n    for (const placeName of placeNames) {\n      try {\n        // Try multiple search strategies for better results\n        const searchQueries = [`${placeName}`,\n        // Original name\n        `${placeName}, ${destination}`,\n        // Name + destination city\n        `${placeName} museum`,\n        // Add \"museum\" if it's a museum\n        `${placeName} attraction` // Add \"attraction\"\n        ];\n\n        // For museums, try alternative search terms\n        if (placeName.toLowerCase().includes(\"museum\")) {\n          // Try without \"museum\" in the name\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\n          if (nameWithoutMuseum) {\n            searchQueries.push(`${nameWithoutMuseum}, ${destination}`);\n            searchQueries.push(`${nameWithoutMuseum} museum, ${destination}`);\n          }\n\n          // Try with just the main part of the name\n          const mainName = placeName.split(\":\")[0].split(\"(\")[0].trim();\n          if (mainName !== placeName) {\n            searchQueries.push(`${mainName}, ${destination}`);\n            searchQueries.push(`${mainName} museum, ${destination}`);\n          }\n        }\n        let found = false;\n        for (const query of searchQueries) {\n          const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=3&addressdetails=1`);\n          const data = await response.json();\n          console.log(`Searching for \"${query}\":`, data.length, \"results\");\n          if (data && data.length > 0) {\n            // Find the best match (prefer results with more address details)\n            const bestMatch = data.find(item => item.display_name.toLowerCase().includes(placeName.toLowerCase()) || item.display_name.toLowerCase().includes(destination.toLowerCase())) || data[0];\n            const {\n              lat,\n              lon,\n              display_name\n            } = bestMatch;\n            const coordinates = [parseFloat(lat), parseFloat(lon)];\n            newMarkers.push({\n              position: coordinates,\n              popup: `${placeName}<br><small>${display_name}</small>`,\n              type: \"place\",\n              placeName: placeName\n            });\n            foundPlaces.push(placeName); // Add to found places list\n            console.log(`✅ Found ${placeName} at:`, coordinates);\n            console.log(`   Full address: ${display_name}`);\n            found = true;\n            break; // Stop trying other queries once we find a match\n          }\n        }\n        if (!found) {\n          console.log(`❌ No results found for: ${placeName}`);\n\n          // Fallback: Try to find any museum in the destination city\n          if (placeName.toLowerCase().includes(\"museum\")) {\n            console.log(`🔄 Trying fallback search for museums in ${destination}`);\n            try {\n              const fallbackResponse = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=museum+${encodeURIComponent(destination)}&limit=5&addressdetails=1`);\n              const fallbackData = await fallbackResponse.json();\n              if (fallbackData && fallbackData.length > 0) {\n                // Find a museum that hasn't been added yet\n                const availableMuseums = fallbackData.filter(museum => !newMarkers.some(marker => marker.popup.toLowerCase().includes(museum.display_name.toLowerCase().split(\",\")[0].toLowerCase())));\n                if (availableMuseums.length > 0) {\n                  const museum = availableMuseums[0];\n                  const coordinates = [parseFloat(museum.lat), parseFloat(museum.lon)];\n                  newMarkers.push({\n                    position: coordinates,\n                    popup: `${placeName} (${museum.display_name.split(\",\")[0]})<br><small>${museum.display_name}</small>`,\n                    type: \"place\",\n                    placeName: placeName\n                  });\n                  foundPlaces.push(placeName); // Add fallback found place to list\n                  console.log(`✅ Fallback found: ${museum.display_name.split(\",\")[0]} at:`, coordinates);\n                }\n              }\n            } catch (fallbackError) {\n              console.error(`Fallback search failed for ${placeName}:`, fallbackError);\n            }\n          }\n        }\n\n        // Add small delay to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 200));\n      } catch (error) {\n        console.error(`Error geocoding ${placeName}:`, error);\n      }\n    }\n\n    // Add new markers to existing ones\n    if (newMarkers.length > 0) {\n      setMarkers(prev => [...prev, ...newMarkers]);\n      console.log(`Added ${newMarkers.length} new markers to map`);\n    } else {\n      console.log(\"No new markers were added\");\n    }\n    console.log(\"Found places for highlighting:\", foundPlaces);\n    return foundPlaces;\n  };\n\n  // Geocode destination to get coordinates\n  const geocodeDestination = React.useCallback(async destinationName => {\n    try {\n      console.log(\"Geocoding destination:\", destinationName);\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(destinationName)}&limit=1`);\n      const data = await response.json();\n      console.log(\"Geocoding response:\", data);\n      if (data && data.length > 0) {\n        const {\n          lat,\n          lon\n        } = data[0];\n        const coordinates = [parseFloat(lat), parseFloat(lon)];\n        console.log(\"Found coordinates:\", coordinates);\n\n        // Update map center to destination\n        setMapCenter(coordinates);\n\n        // Add destination marker\n        setMarkers([{\n          position: coordinates,\n          popup: `${destinationName} - Your destination for ${days} days`,\n          type: \"destination\",\n          placeName: destinationName\n        }]);\n        return coordinates;\n      } else {\n        console.log(\"No results found for:\", destinationName);\n      }\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n    }\n    return null;\n  }, [days]);\n  useEffect(() => {\n    // Initialize with welcome message\n    const welcomeMessage = {\n      id: 1,\n      text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\n      sender: \"ai\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages([welcomeMessage]);\n\n    // Geocode destination and update map\n    if (destination) {\n      geocodeDestination(destination);\n    }\n  }, [destination, days, geocodeDestination]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n    const newMessage = {\n      id: messages.length + 1,\n      text: inputMessage,\n      sender: \"user\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages([...messages, newMessage]);\n    const userMessage = inputMessage;\n    setInputMessage(\"\");\n\n    // Add loading message\n    const loadingMessage = {\n      id: messages.length + 2,\n      text: \"Lawander is thinking...\",\n      sender: \"ai\",\n      timestamp: new Date().toLocaleTimeString(),\n      isLoading: true\n    };\n    setMessages(prev => [...prev, loadingMessage]);\n    try {\n      // Add destination context to the message\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. Please provide information specifically about ${destination} and its attractions, restaurants, activities, etc. User question: ${userMessage}`;\n\n      // Call backend API\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: contextualMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Extract place names from AI response (format: **PlaceName**)\n      const placeNames = extractPlaceNames(data.message);\n      console.log(\"AI Response:\", data.message);\n      console.log(\"Extracted place names:\", placeNames);\n\n      // Geocode the places and add them to the map\n      let foundPlaces = [];\n      if (placeNames.length > 0) {\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\n        foundPlaces = await geocodePlaces(placeNames);\n      } else {\n        console.log(\"No place names found in AI response\");\n      }\n\n      // Remove loading message and add real response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const aiResponse = {\n          id: withoutLoading.length + 1,\n          text: data.message,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          foundPlaces: foundPlaces // Store found places for highlighting\n        };\n        return [...withoutLoading, aiResponse];\n      });\n    } catch (error) {\n      console.error(\"Error calling chat API:\", error);\n\n      // Remove loading message and add error response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const errorResponse = {\n          id: withoutLoading.length + 1,\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        return [...withoutLoading, errorResponse];\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: onBackToWelcome,\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"chat-title\",\n          children: \"Lawander\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trip-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"destination\",\n          children: destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"days\",\n          children: [days, \" days\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender === \"user\" ? \"user-message\" : \"ai-message\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message-content ${message.isLoading ? \"loading\" : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                dangerouslySetInnerHTML: {\n                  __html: formatMessageText(message.text, message.foundPlaces)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-time\",\n                children: message.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 597,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 17\n            }, this)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"message-form\",\n          onSubmit: handleSendMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputMessage,\n            onChange: e => setInputMessage(e.target.value),\n            placeholder: \"Ask about your destination...\",\n            className: \"message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: mapCenter,\n          zoom: 13,\n          style: {\n            height: \"100%\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this), markers.map((marker, index) => {\n            const colorInfo = getMarkerColor(marker.type, marker.placeName);\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              position: marker.position,\n              icon: createCustomIcon(colorInfo.color, colorInfo.emoji),\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: marker.popup\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 637,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 17\n            }, this);\n          })]\n        }, `${mapCenter[0]}-${mapCenter[1]}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 560,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"Cy69dn7R+sTDLfWgizxoHCN8dp8=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","createCustomIcon","color","emoji","divIcon","className","html","iconSize","iconAnchor","popupAnchor","getMarkerColor","placeType","placeName","name","toLowerCase","includes","getWikipediaUrl","destination","searchTerm","replace","encodeURIComponent","getPlaceDescription","fullAddress","_addressParts","_addressParts2","addressParts","split","city","length","trim","category","description","Chat","days","onBackToWelcome","_s","messages","setMessages","inputMessage","setInputMessage","mapCenter","setMapCenter","markers","setMarkers","messagesEndRef","useRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","extractPlaceNames","text","console","log","regex","matches","match","exec","push","formatMessageText","foundPlaces","trimmedPlaceName","geocodePlaces","placeNames","newMarkers","searchQueries","nameWithoutMuseum","mainName","found","query","response","fetch","data","json","bestMatch","find","item","display_name","lat","lon","coordinates","parseFloat","position","popup","type","fallbackResponse","fallbackData","availableMuseums","filter","museum","some","marker","fallbackError","error","Promise","resolve","setTimeout","prev","geocodeDestination","useCallback","destinationName","welcomeMessage","id","sender","timestamp","Date","toLocaleTimeString","handleSendMessage","e","preventDefault","newMessage","userMessage","loadingMessage","isLoading","contextualMessage","method","headers","body","JSON","stringify","message","ok","Error","status","withoutLoading","msg","aiResponse","errorResponse","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","dangerouslySetInnerHTML","__html","ref","onSubmit","value","onChange","target","placeholder","center","zoom","style","height","width","attribution","url","index","colorInfo","icon","_c","$RefreshReg$"],"sources":["C:/Users/Deividas/CC_Workspace/lawander/Front/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"../css/chat.css\";\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\r\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\r\n});\r\n\r\n// Create custom colored icons for different marker types\r\nconst createCustomIcon = (color, emoji = \"📍\") => {\r\n  return L.divIcon({\r\n    className: \"custom-marker\",\r\n    html: `\r\n      <div style=\"\r\n        background-color: ${color};\r\n        width: 25px;\r\n        height: 25px;\r\n        border-radius: 50% 50% 50% 0;\r\n        transform: rotate(-45deg);\r\n        border: 2px solid white;\r\n        box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n      \">\r\n        <div style=\"\r\n          transform: rotate(45deg);\r\n          color: white;\r\n          font-size: 12px;\r\n          font-weight: bold;\r\n        \">${emoji}</div>\r\n      </div>\r\n    `,\r\n    iconSize: [25, 25],\r\n    iconAnchor: [12, 24],\r\n    popupAnchor: [0, -24],\r\n  });\r\n};\r\n\r\n// Color scheme for different place types\r\nconst getMarkerColor = (placeType, placeName) => {\r\n  const name = placeName.toLowerCase();\r\n\r\n  if (placeType === \"destination\") {\r\n    return { color: \"#ff69b4\", emoji: \"🏙️\" }; // Pink for destination\r\n  }\r\n\r\n  // Check for specific place categories\r\n  if (\r\n    name.includes(\"museum\") ||\r\n    name.includes(\"gallery\") ||\r\n    name.includes(\"exhibition\")\r\n  ) {\r\n    return { color: \"#8B4513\", emoji: \"🏛️\" }; // Brown for museums\r\n  }\r\n\r\n  if (\r\n    name.includes(\"restaurant\") ||\r\n    name.includes(\"cafe\") ||\r\n    name.includes(\"bar\") ||\r\n    name.includes(\"food\") ||\r\n    name.includes(\"dining\") ||\r\n    name.includes(\"kitchen\")\r\n  ) {\r\n    return { color: \"#DC143C\", emoji: \"🍽️\" }; // Red for restaurants\r\n  }\r\n\r\n  if (\r\n    name.includes(\"hotel\") ||\r\n    name.includes(\"accommodation\") ||\r\n    name.includes(\"hostel\") ||\r\n    name.includes(\"resort\") ||\r\n    name.includes(\"lodge\")\r\n  ) {\r\n    return { color: \"#4169E1\", emoji: \"🏨\" }; // Royal blue for hotels\r\n  }\r\n\r\n  if (\r\n    name.includes(\"park\") ||\r\n    name.includes(\"garden\") ||\r\n    name.includes(\"nature\") ||\r\n    name.includes(\"forest\") ||\r\n    name.includes(\"beach\")\r\n  ) {\r\n    return { color: \"#228B22\", emoji: \"🌳\" }; // Forest green for parks/nature\r\n  }\r\n\r\n  if (\r\n    name.includes(\"church\") ||\r\n    name.includes(\"cathedral\") ||\r\n    name.includes(\"temple\") ||\r\n    name.includes(\"mosque\") ||\r\n    name.includes(\"synagogue\")\r\n  ) {\r\n    return { color: \"#9370DB\", emoji: \"⛪\" }; // Purple for religious sites\r\n  }\r\n\r\n  if (\r\n    name.includes(\"shop\") ||\r\n    name.includes(\"market\") ||\r\n    name.includes(\"mall\") ||\r\n    name.includes(\"store\") ||\r\n    name.includes(\"boutique\")\r\n  ) {\r\n    return { color: \"#FF8C00\", emoji: \"🛍️\" }; // Orange for shopping\r\n  }\r\n\r\n  if (\r\n    name.includes(\"theater\") ||\r\n    name.includes(\"cinema\") ||\r\n    name.includes(\"concert\") ||\r\n    name.includes(\"show\") ||\r\n    name.includes(\"entertainment\")\r\n  ) {\r\n    return { color: \"#FF1493\", emoji: \"🎭\" }; // Deep pink for entertainment\r\n  }\r\n\r\n  // Default color for other attractions\r\n  return { color: \"#1E90FF\", emoji: \"🎯\" }; // Dodger blue for general attractions\r\n};\r\n\r\n// Generate Wikipedia search URL for a place\r\nconst getWikipediaUrl = (placeName, destination) => {\r\n  const searchTerm = `${placeName} ${destination}`.replace(/\\s+/g, '_');\r\n  return `https://en.wikipedia.org/wiki/Special:Search?search=${encodeURIComponent(searchTerm)}`;\r\n};\r\n\r\n// Generate shortened description and category for a place\r\nconst getPlaceDescription = (placeName, fullAddress) => {\r\n  const name = placeName.toLowerCase();\r\n  \r\n  // Extract just the city/area from the full address\r\n  const addressParts = fullAddress.split(',');\r\n  const city = addressParts[addressParts.length - 3]?.trim() || addressParts[addressParts.length - 2]?.trim() || 'Unknown';\r\n  \r\n  // Generate category and description based on place type\r\n  if (name.includes(\"museum\") || name.includes(\"gallery\") || name.includes(\"exhibition\")) {\r\n    return {\r\n      category: \"Museum & Culture\",\r\n      description: `A cultural institution showcasing art, history, or science exhibits. Located in ${city}.`\r\n    };\r\n  }\r\n  \r\n  if (name.includes(\"restaurant\") || name.includes(\"cafe\") || name.includes(\"bar\") || \r\n      name.includes(\"food\") || name.includes(\"dining\") || name.includes(\"kitchen\")) {\r\n    return {\r\n      category: \"Dining & Food\",\r\n      description: `A local dining establishment offering food and beverages. Located in ${city}.`\r\n    };\r\n  }\r\n  \r\n  if (name.includes(\"hotel\") || name.includes(\"accommodation\") || name.includes(\"hostel\") || \r\n      name.includes(\"resort\") || name.includes(\"lodge\")) {\r\n    return {\r\n      category: \"Accommodation\",\r\n      description: `A place to stay during your visit. Located in ${city}.`\r\n    };\r\n  }\r\n  \r\n  if (name.includes(\"park\") || name.includes(\"garden\") || name.includes(\"nature\") || \r\n      name.includes(\"forest\") || name.includes(\"beach\")) {\r\n    return {\r\n      category: \"Nature & Recreation\",\r\n      description: `A natural area perfect for relaxation and outdoor activities. Located in ${city}.`\r\n    };\r\n  }\r\n  \r\n  if (name.includes(\"church\") || name.includes(\"cathedral\") || name.includes(\"temple\") || \r\n      name.includes(\"mosque\") || name.includes(\"synagogue\")) {\r\n    return {\r\n      category: \"Religious Site\",\r\n      description: `A place of worship with historical and cultural significance. Located in ${city}.`\r\n    };\r\n  }\r\n  \r\n  if (name.includes(\"shop\") || name.includes(\"market\") || name.includes(\"mall\") || \r\n      name.includes(\"store\") || name.includes(\"boutique\")) {\r\n    return {\r\n      category: \"Shopping\",\r\n      description: `A retail location for shopping and browsing local goods. Located in ${city}.`\r\n    };\r\n  }\r\n  \r\n  if (name.includes(\"theater\") || name.includes(\"cinema\") || name.includes(\"concert\") || \r\n      name.includes(\"show\") || name.includes(\"entertainment\")) {\r\n    return {\r\n      category: \"Entertainment\",\r\n      description: `A venue for shows, performances, and entertainment. Located in ${city}.`\r\n    };\r\n  }\r\n  \r\n  // Default for other attractions\r\n  return {\r\n    category: \"Tourist Attraction\",\r\n    description: `A notable place worth visiting during your trip. Located in ${city}.`\r\n  };\r\n};\r\n\r\nfunction Chat({ destination, days, onBackToWelcome }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default to London\r\n  const [markers, setMarkers] = useState([]);\r\n  const messagesEndRef = React.useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  // Extract place names from text (format: **PlaceName**)\r\n  const extractPlaceNames = (text) => {\r\n    console.log(\"Extracting place names from text:\", text);\r\n    const regex = /\\*\\*(.*?)\\*\\*/g;\r\n    const matches = [];\r\n    let match;\r\n    while ((match = regex.exec(text)) !== null) {\r\n      matches.push(match[1].trim());\r\n    }\r\n    console.log(\"Found matches:\", matches);\r\n    return matches;\r\n  };\r\n\r\n  // Format message text to highlight only found place names\r\n  const formatMessageText = (text, foundPlaces = []) => {\r\n    if (foundPlaces.length === 0) {\r\n      // If no places were found, don't highlight any\r\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\");\r\n    }\r\n\r\n    // Only highlight places that were actually found on the map\r\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, (match, placeName) => {\r\n      const trimmedPlaceName = placeName.trim();\r\n      if (foundPlaces.includes(trimmedPlaceName)) {\r\n        return `<span class=\"place-name\">${placeName}</span>`;\r\n      } else {\r\n        return placeName; // Don't highlight if not found\r\n      }\r\n    });\r\n  };\r\n\r\n  // Geocode multiple places and add them to the map\r\n  const geocodePlaces = async (placeNames) => {\r\n    console.log(\"Geocoding places:\", placeNames);\r\n    const newMarkers = [];\r\n    const foundPlaces = [];\r\n\r\n    for (const placeName of placeNames) {\r\n      try {\r\n        // Try multiple search strategies for better results\r\n        const searchQueries = [\r\n          `${placeName}`, // Original name\r\n          `${placeName}, ${destination}`, // Name + destination city\r\n          `${placeName} museum`, // Add \"museum\" if it's a museum\r\n          `${placeName} attraction`, // Add \"attraction\"\r\n        ];\r\n\r\n        // For museums, try alternative search terms\r\n        if (placeName.toLowerCase().includes(\"museum\")) {\r\n          // Try without \"museum\" in the name\r\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\r\n          if (nameWithoutMuseum) {\r\n            searchQueries.push(`${nameWithoutMuseum}, ${destination}`);\r\n            searchQueries.push(`${nameWithoutMuseum} museum, ${destination}`);\r\n          }\r\n\r\n          // Try with just the main part of the name\r\n          const mainName = placeName.split(\":\")[0].split(\"(\")[0].trim();\r\n          if (mainName !== placeName) {\r\n            searchQueries.push(`${mainName}, ${destination}`);\r\n            searchQueries.push(`${mainName} museum, ${destination}`);\r\n          }\r\n        }\r\n\r\n        let found = false;\r\n        for (const query of searchQueries) {\r\n          const response = await fetch(\r\n            `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n              query\r\n            )}&limit=3&addressdetails=1`\r\n          );\r\n          const data = await response.json();\r\n\r\n          console.log(`Searching for \"${query}\":`, data.length, \"results\");\r\n\r\n          if (data && data.length > 0) {\r\n            // Find the best match (prefer results with more address details)\r\n            const bestMatch =\r\n              data.find(\r\n                (item) =>\r\n                  item.display_name\r\n                    .toLowerCase()\r\n                    .includes(placeName.toLowerCase()) ||\r\n                  item.display_name\r\n                    .toLowerCase()\r\n                    .includes(destination.toLowerCase())\r\n              ) || data[0];\r\n\r\n            const { lat, lon, display_name } = bestMatch;\r\n            const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n\r\n            newMarkers.push({\r\n              position: coordinates,\r\n              popup: `${placeName}<br><small>${display_name}</small>`,\r\n              type: \"place\",\r\n              placeName: placeName,\r\n            });\r\n\r\n            foundPlaces.push(placeName); // Add to found places list\r\n            console.log(`✅ Found ${placeName} at:`, coordinates);\r\n            console.log(`   Full address: ${display_name}`);\r\n            found = true;\r\n            break; // Stop trying other queries once we find a match\r\n          }\r\n        }\r\n\r\n        if (!found) {\r\n          console.log(`❌ No results found for: ${placeName}`);\r\n\r\n          // Fallback: Try to find any museum in the destination city\r\n          if (placeName.toLowerCase().includes(\"museum\")) {\r\n            console.log(\r\n              `🔄 Trying fallback search for museums in ${destination}`\r\n            );\r\n            try {\r\n              const fallbackResponse = await fetch(\r\n                `https://nominatim.openstreetmap.org/search?format=json&q=museum+${encodeURIComponent(\r\n                  destination\r\n                )}&limit=5&addressdetails=1`\r\n              );\r\n              const fallbackData = await fallbackResponse.json();\r\n\r\n              if (fallbackData && fallbackData.length > 0) {\r\n                // Find a museum that hasn't been added yet\r\n                const availableMuseums = fallbackData.filter(\r\n                  (museum) =>\r\n                    !newMarkers.some((marker) =>\r\n                      marker.popup\r\n                        .toLowerCase()\r\n                        .includes(\r\n                          museum.display_name\r\n                            .toLowerCase()\r\n                            .split(\",\")[0]\r\n                            .toLowerCase()\r\n                        )\r\n                    )\r\n                );\r\n\r\n                if (availableMuseums.length > 0) {\r\n                  const museum = availableMuseums[0];\r\n                  const coordinates = [\r\n                    parseFloat(museum.lat),\r\n                    parseFloat(museum.lon),\r\n                  ];\r\n\r\n                  newMarkers.push({\r\n                    position: coordinates,\r\n                    popup: `${placeName} (${\r\n                      museum.display_name.split(\",\")[0]\r\n                    })<br><small>${museum.display_name}</small>`,\r\n                    type: \"place\",\r\n                    placeName: placeName,\r\n                  });\r\n\r\n                  foundPlaces.push(placeName); // Add fallback found place to list\r\n                  console.log(\r\n                    `✅ Fallback found: ${\r\n                      museum.display_name.split(\",\")[0]\r\n                    } at:`,\r\n                    coordinates\r\n                  );\r\n                }\r\n              }\r\n            } catch (fallbackError) {\r\n              console.error(\r\n                `Fallback search failed for ${placeName}:`,\r\n                fallbackError\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        // Add small delay to avoid rate limiting\r\n        await new Promise((resolve) => setTimeout(resolve, 200));\r\n      } catch (error) {\r\n        console.error(`Error geocoding ${placeName}:`, error);\r\n      }\r\n    }\r\n\r\n    // Add new markers to existing ones\r\n    if (newMarkers.length > 0) {\r\n      setMarkers((prev) => [...prev, ...newMarkers]);\r\n      console.log(`Added ${newMarkers.length} new markers to map`);\r\n    } else {\r\n      console.log(\"No new markers were added\");\r\n    }\r\n\r\n    console.log(\"Found places for highlighting:\", foundPlaces);\r\n    return foundPlaces;\r\n  };\r\n\r\n  // Geocode destination to get coordinates\r\n  const geocodeDestination = React.useCallback(\r\n    async (destinationName) => {\r\n      try {\r\n        console.log(\"Geocoding destination:\", destinationName);\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n            destinationName\r\n          )}&limit=1`\r\n        );\r\n        const data = await response.json();\r\n        console.log(\"Geocoding response:\", data);\r\n\r\n        if (data && data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n          console.log(\"Found coordinates:\", coordinates);\r\n\r\n          // Update map center to destination\r\n          setMapCenter(coordinates);\r\n\r\n          // Add destination marker\r\n          setMarkers([\r\n            {\r\n              position: coordinates,\r\n              popup: `${destinationName} - Your destination for ${days} days`,\r\n              type: \"destination\",\r\n              placeName: destinationName,\r\n            },\r\n          ]);\r\n\r\n          return coordinates;\r\n        } else {\r\n          console.log(\"No results found for:\", destinationName);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Geocoding error:\", error);\r\n      }\r\n      return null;\r\n    },\r\n    [days]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Initialize with welcome message\r\n    const welcomeMessage = {\r\n      id: 1,\r\n      text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\r\n      sender: \"ai\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n    setMessages([welcomeMessage]);\r\n\r\n    // Geocode destination and update map\r\n    if (destination) {\r\n      geocodeDestination(destination);\r\n    }\r\n  }, [destination, days, geocodeDestination]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const newMessage = {\r\n      id: messages.length + 1,\r\n      text: inputMessage,\r\n      sender: \"user\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n\r\n    setMessages([...messages, newMessage]);\r\n    const userMessage = inputMessage;\r\n    setInputMessage(\"\");\r\n\r\n    // Add loading message\r\n    const loadingMessage = {\r\n      id: messages.length + 2,\r\n      text: \"Lawander is thinking...\",\r\n      sender: \"ai\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      isLoading: true,\r\n    };\r\n    setMessages((prev) => [...prev, loadingMessage]);\r\n\r\n    try {\r\n      // Add destination context to the message\r\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. Please provide information specifically about ${destination} and its attractions, restaurants, activities, etc. User question: ${userMessage}`;\r\n\r\n      // Call backend API\r\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: contextualMessage,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // Extract place names from AI response (format: **PlaceName**)\r\n      const placeNames = extractPlaceNames(data.message);\r\n      console.log(\"AI Response:\", data.message);\r\n      console.log(\"Extracted place names:\", placeNames);\r\n\r\n      // Geocode the places and add them to the map\r\n      let foundPlaces = [];\r\n      if (placeNames.length > 0) {\r\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\r\n        foundPlaces = await geocodePlaces(placeNames);\r\n      } else {\r\n        console.log(\"No place names found in AI response\");\r\n      }\r\n\r\n      // Remove loading message and add real response\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const aiResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: data.message,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          foundPlaces: foundPlaces, // Store found places for highlighting\r\n        };\r\n        return [...withoutLoading, aiResponse];\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error calling chat API:\", error);\r\n\r\n      // Remove loading message and add error response\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const errorResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n        };\r\n        return [...withoutLoading, errorResponse];\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-app\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"header-left\">\r\n          <button className=\"back-button\" onClick={onBackToWelcome}>\r\n            ← Back\r\n          </button>\r\n          <h1 className=\"chat-title\">Lawander</h1>\r\n        </div>\r\n        <div className=\"trip-info\">\r\n          <span className=\"destination\">{destination}</span>\r\n          <span className=\"days\">{days} days</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-window\">\r\n          <div className=\"messages-container\">\r\n            {messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`message ${\r\n                  message.sender === \"user\" ? \"user-message\" : \"ai-message\"\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`message-content ${\r\n                    message.isLoading ? \"loading\" : \"\"\r\n                  }`}\r\n                >\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: formatMessageText(\r\n                        message.text,\r\n                        message.foundPlaces\r\n                      ),\r\n                    }}\r\n                  ></p>\r\n                  <span className=\"message-time\">{message.timestamp}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          <form className=\"message-form\" onSubmit={handleSendMessage}>\r\n            <input\r\n              type=\"text\"\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              placeholder=\"Ask about your destination...\"\r\n              className=\"message-input\"\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n              Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"map-container\">\r\n          <MapContainer\r\n            key={`${mapCenter[0]}-${mapCenter[1]}`}\r\n            center={mapCenter}\r\n            zoom={13}\r\n            style={{ height: \"100%\", width: \"100%\" }}\r\n          >\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {markers.map((marker, index) => {\r\n              const colorInfo = getMarkerColor(marker.type, marker.placeName);\r\n              return (\r\n                <Marker\r\n                  key={index}\r\n                  position={marker.position}\r\n                  icon={createCustomIcon(colorInfo.color, colorInfo.emoji)}\r\n                >\r\n                  <Popup>{marker.popup}</Popup>\r\n                </Marker>\r\n              );\r\n            })}\r\n          </MapContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}